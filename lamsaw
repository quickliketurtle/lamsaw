#!/usr/bin/env bash

## Define Variables
PROJECTNAME=$1
TLD=$(php -r "echo json_decode(file_get_contents('${HOME}/.valet/config.json'))->domain;")
PROJECTURL="http://${PROJECTNAME}.${TLD}"

## Source config file
if [[ -f "${HOME}/.lamsaw/config" ]]; then
    source "${HOME}/.lamsaw/config"
fi

## Define Functions
run() {
    ### Make project directory
    if [[ -d "${PROJECTPATH}/${PROJECTNAME}" ]]; then
        pretty_print "${PROJECTPATH}/${PROJECTNAME} already exists" danger
        quit
    fi

    mkdir "${PROJECTPATH}/${PROJECTNAME}"

    ### cd into it
    cd "${PROJECTPATH}/${PROJECTNAME}" || exit

    ### composer require jigsaw
    if  command_exists composer; then
        composer require tightenco/jigsaw
    fi

    ### Initialize new Jigsaw project
    if command_exists ./vendor/bin/jigsaw; then
        ./vendor/bin/jigsaw init
    fi

    ### Run yarn || npm install
    if [[ "${NODE}" = true ]]; then
        if command_exists yarn; then
            yarn
        elif command_exists npm; then
            npm install
        fi

        ### Build site
        if command_exists gulp; then
            gulp
        fi
    fi

    ### Init Git and make first commit
    if command_exists git; then
        git init
        git add .
        git commit -m "${MESSAGE}"
    fi

    ### Open Editor
    if command_exists "${CODEEDITOR}"; then
        "${CODEEDITOR}" .
    fi

    ### Open Browser
    if [[ -d "build_local" ]]; then
        if [[ "${BROWSER}" != "" ]]; then
            open -a "${BROWSER}" "${PROJECTURL}"
        else
            open "${PROJECTURL}"
        fi
    fi

    ### Load after file
    load_after_file
}

show_help() {
    pretty_print ""
    pretty_print "Lamsaw: Super-powered Jigsaw setup script" success
    pretty_print "________________________________________________________"
    pretty_print ""
    pretty_print "Usage:" warning
    pretty_print "  lamsaw myApplication [arguments]"
    pretty_print ""
    pretty_print "Commands (lamsaw COMMANDNAME):" warning
    pretty_print "  make-config                   Generate config file"
    pretty_print "  make-after                    Generate after file"
    pretty_print ""
    pretty_print "Options (lamsaw myApplication OPTIONS):" warning
    pretty_print "  -h, --help                    Show brief help"
    quit
}

make_config() {
    if [[ -f "${HOME}/.lamsaw/config" ]]; then
        pretty_print "Config already exists." warning
        quit
    fi

    if [[ ! -d "${HOME}/.lamsaw" ]]; then
      mkdir "${HOME}/.lamsaw"
    fi

    cp templates/config "${HOME}/.lamsaw/config"
}

make_after() {
    if [[ -f "${HOME}/.lamsaw/after" ]]; then
        pretty_print "After file already exists." warning
        quit
    fi

    if [[ ! -d "${HOME}/.lamsaw" ]]; then
      mkdir "${HOME}/.lamsaw"
    fi

    cp templates/after "${HOME}/.lamsaw/after"
}

load_after_file() {
    if [[ -f "${HOME}/.lamsaw/after" ]]; then
        pretty_print "Running additional commands..." success
        source "${HOME}/.lamsaw/after"
    fi
}

command_exists() {
    command=$1

    if ! hash "${command}" 2> /dev/null; then
        pretty_print "Command ${command} not found" danger
        quit
    fi
}

pretty_print() {
    if [[ $2 = "danger" ]]; then
        tput setaf 1 ### Red
    fi
    if [[ $2 = "success" ]]; then
        tput setaf 2 ### Green
    fi
    if [[ $2 = "warning" ]]; then
        tput setaf 3 ### Orange
    fi

    printf '%s\n' "$1"
    tput sgr0 ### Reset
}

quit() {
    trap : 0
    exit 0
}

## If not arguments, show help
if [[ $# -eq 0 ]]; then
    show_help
fi

## Handle Commands
if [[ $1 == "make-config" ]]; then
    make_config
    quit
fi

## Handle Arguments
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -h|--help)
            show_help
            ;;
    esac

    shift
done

## Run the script
run
